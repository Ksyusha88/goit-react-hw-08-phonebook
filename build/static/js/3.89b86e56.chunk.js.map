{"version":3,"sources":["redux/contacts/operations.js","redux/contacts/selectors.js","Components/Form/index.jsx","Components/ContactList/ContactList.jsx","Components/ContactFilter/ContactFilter.jsx","views/ContactsViews.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","Components/Form/form.module.css","Components/ContactList/ContactList.module.css","Components/ContactFilter/ContactFilter.module.css"],"names":["name","number","dispatch","contact","addContactRequest","axios","post","then","data","addContactSuccess","catch","error","addContactError","messege","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","a","fetchContactRequest","get","fetchContactSuccess","fetchContactError","getFilter","state","contacts","filter","getVisibleContacts","createSelector","items","normalizedFilter","toLowerCase","includes","Form","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","evt","preventDefault","props","onAddContact","reset","this","className","style","form","onSubmit","label_text","htmlFor","form_input","type","onChange","id","pattern","title","required","add_button","Component","connect","contactsOperations","contactsSelectors","onDeleteContact","contactsOperetions","contactList","map","contactItem","contactName","deleteBtm","onClick","filterContact","ContactsView","fetchContact","Container","addContact","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","setCharacters","_alphabet_","length","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","characters","seed","lookup","index","build","isValid","clusterWorkerId","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","RegExp","replace","test"],"mappings":"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","file":"static/js/3.89b86e56.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError\r\n} from './actions';\r\n\r\nconst fetchContact = () => async dispatch =>{\r\n    dispatch(fetchContactRequest());\r\n    \r\ntry{\r\n    const {data} = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n} catch (error){\r\n    dispatch(fetchContactError(error.messege));\r\n}\r\n};\r\n\r\nconst addContact = ({name, number}) => dispatch =>{\r\n    const contact = {\r\n        name,\r\n        number\r\n    };\r\n\r\ndispatch(addContactRequest);    \r\n\r\naxios\r\n.post('/contacts', contact)\r\n.then(({data}) => dispatch(addContactSuccess(data)))\r\n.catch(error => dispatch(addContactError(error.messege)));\r\n};\r\n\r\nconst deleteContact = contactId  => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId )))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default {\r\n    addContact,\r\n    deleteContact,\r\n    fetchContact\r\n};","import { createSelector } from '@reduxjs/toolkit';\r\n\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts =state => state.contacts.items;\r\n\r\n// const getVisibleContacts = state => {\r\n//     const contacts = getAllContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return contacts.filter(({name}) => \r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\nconst getVisibleContacts = createSelector(\r\n    [getAllContacts,getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n\r\n        return contacts.filter(({name}) => \r\n        name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\nexport default{\r\n    getFilter,\r\n    getVisibleContacts\r\n};","import { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport style from '../Form/form.module.css';\r\nimport contactsOperations from '../../redux/contacts/operations';\r\nimport { connect } from 'react-redux';\r\nimport contactsSelectors from '../../redux/contacts/selectors';\r\n\r\nclass Form extends Component {\r\n    state ={\r\n        name: '',\r\n        number: ''\r\n    };\r\n\r\nnameInputId = shortid.generate();\r\nnumberInputId = shortid.generate();\r\n\r\nhandleChange = e => {\r\n        const { name, value } = e.currentTarget;\r\n        this.setState({ [name]: value });\r\n      };\r\n    \r\n      \r\nhandleSubmit = evt => {\r\n        evt.preventDefault();\r\n        this.props.onAddContact(this.state);\r\n        this.reset();\r\n      };\r\n\r\nreset =() =>{\r\n    this.setState({ name: '', number: '' });\r\n};\r\n\r\n    render (){\r\n        const { number, name } = this.state;\r\n        return(\r\n            <form className={style.form} onSubmit ={this.handleSubmit}>\r\n                               \r\n                <label className={style.label_text} htmlFor ={this.nameInputId}>\r\n                    Name <input className={style.form_input}  type=\"text\"\r\n                    onChange = {this.handleChange}\r\n                    value={name}\r\n                    name =\"name\"\r\n                    id = {this.nameInputId}\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    />\r\n                </label>\r\n                \r\n                <label className={style.label_text} htmlFor ={this.numberInputId}>\r\n                    Number <input className={style.form_input} type=\"tell\"\r\n                    onChange = {this.handleChange}\r\n                    value={number}\r\n                    name =\"number\"\r\n                    id = {this.numberInputId}\r\n                    pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                    title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                    required\r\n                    />\r\n                </label>                \r\n                <button className={style.add_button} type=\"submit\"> Add contact </button>                   \r\n            </form>\r\n                )}\r\n        };\r\n\r\n\r\nconst mapStateToProps = state =>({\r\n    value:contactsSelectors.getFilter(state),\r\n});\r\n\r\n        const mapDispatchToProps = dispatch => ({\r\n            onAddContact: ({ name, number }) => dispatch(contactsOperations.addContact({name,number})),\r\n        })\r\n\r\n        // const mapDispatchToProps = dispatch => ({\r\n        //     onSubmit: text => dispatch(contactsOperations.addContact(text)),\r\n        // })\r\n\r\n\r\n        export default connect(null,mapDispatchToProps)(Form);","import { connect } from 'react-redux';\r\nimport style from '../ContactList/ContactList.module.css';\r\nimport contactsOperetions from '../../redux/contacts/operations';\r\nimport contactsSelectors from '../../redux/contacts/selectors';\r\n\r\nconst ContactList = ({contacts, onDeleteContact}) => (\r\n<ul className ={style.contactList}>\r\n    {contacts.map(({name, id, number}) =>(\r\n        <li key ={id} className = {style.contactItem}>\r\n            <p className = {style.contactName}>{name}\r\n                {': '}\r\n                {number}\r\n                </p>\r\n                <button className ={style.deleteBtm} onClick ={() => onDeleteContact(id)}>Delete</button>\r\n        </li>\r\n    )\r\n\r\n    )}\r\n</ul>\r\n)\r\n\r\n// const getVisibleContacts =(allContacts, filter) => {\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return allContacts.filter(({name}) => \r\n//     name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts:contactsSelectors.getVisibleContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact:(id) => dispatch(contactsOperetions.deleteContact(id)),\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactList);","import style from '../ContactFilter/ContactFilter.module.css';\r\nimport {filterContact} from '../../redux/contacts/actions';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst ContactFilter = ({value, onChange}) =>(\r\n            <form className={style.form}>\r\n                <label className={style.label_text}>\r\n                Phone book search\r\n                    <input className={style.form_input}\r\n                    type = \"text\"\r\n                    value = {value}\r\n                    name=\"text\"\r\n                    onChange ={onChange}\r\n                    />\r\n                </label>\r\n            </form>\r\n            \r\n);\r\n\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    value: state.contacts.filter,\r\n});\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(filterContact(e.currentTarget.value)),\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactFilter);\r\n\r\n ","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Form from '../Components/Form';\r\nimport ContactList from '../Components/ContactList';\r\nimport ContactFilter from '../Components/ContactFilter';\r\nimport contactsOperetions from '../redux/contacts/operations';\r\nimport Container from '../Components/Container';\r\n\r\nconst barStyles = {\r\n    display: 'flex',\r\n    alignItems: 'flex-end',\r\n    marginBottom: 20,\r\n  };\r\n\r\nclass ContactsView extends Component{\r\n    componentDidMount() {\r\n        this.props.fetchContact();\r\n}\r\n\r\nrender(){\r\n    return(\r\n        <Container>\r\n          <h1>Phonebook</h1> \r\n          <Form onAddContact = {this.addContact}\r\n         />\r\n         <ContactFilter/>\r\n          <ContactList/>\r\n          </Container>\r\n        );\r\n      }\r\n    };\r\n\r\n    const mapDispatchToProps = dispatch => ({\r\n        fetchContact: () => dispatch(contactsOperetions.fetchContact()),\r\n      });\r\n\r\n      export default connect(null,mapDispatchToProps)(ContactsView);","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"form_form__3yTOw\",\"label_text\":\"form_label_text__Csnm_\",\"form_input\":\"form_form_input__3-iHa\",\"add_button\":\"form_add_button__f4SGP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__SFECh\",\"contactItem\":\"ContactList_contactItem__3FQ-q\",\"contactName\":\"ContactList_contactName__16GzF\",\"deleteBtm\":\"ContactList_deleteBtm__vlyIP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactFilter_form__7l2PY\",\"label_text\":\"ContactFilter_label_text__27bbs\",\"form_input\":\"ContactFilter_form_input__3uJnG\"};"],"sourceRoot":""}